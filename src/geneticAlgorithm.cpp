#include <vector>
#include <utility>
#include <math.h>
#include <algorithm>
#include <iostream>
#include <assert.h>
#include <map>
#include <fstream>
#include "winrate_lookup_table.h"
using std::ifstream;
using std::endl;
using std::cout;
using std::make_pair;
using std::max;
using std::pair;
using std::vector;
using std::swap;
using std::map;

struct sample{
	vector<double> input;
	int output; // win/lose

	sample() : input(vector<double>{25, 0.0}), output(-1) {}

	sample(vector<int> participants_team_1, vector<int> participants_team_2, int winner) {
		for(auto p1 : participants_team_1){
			for(auto p2 : participants_team_2){
				//cout << p1 << ", " << p2 << endl;
				this->input.push_back(winrate_lookup_table.at({p1, p2}));
			}
		}
		this->output = winner;
	}

	void set_input(int i, double val){
		input[i] = val;
	}

	void set_output(int out){
		output = out;
	}
};

vector<sample> training_samples;
vector<sample> validating_samples;

// FLOAT random number in (a, b)
double rand_rangef(int a, int b){
	assert(b >= a);
	double r = rand()/(double)RAND_MAX;
	// cout << "random generated: " << r*(b-a)+a << endl;
	return r*(b-a)+a;
}

// INTEGER random number in [a, b)
int rand_range(int a, int b){
	assert(b >= a);
	int r = rand()%(b-a);
	// cout << "random generated: " << r+a << endl;
	return r+a;
}

double sigmoid(double val){
	return 1.0/(1+exp(-val));
}

double relu(double val){
	return max(0.0, val);
}

struct individual{
	static const int HIDDEN_LAYER_SIZE = 30;
	static const int INPUT_SIZE = 25;
	static const int OUTPUT_SIZE = 1;
	static constexpr double MUTATION_PROBABILITY = 0.15;
	static const int MINIMAL_WEIGHT = -20;
	static const int MAXIMAL_WEIGHT = 20;
	static const int MINIMAL_BIAS = -10;
	static const int MAXIMAL_BIAS = 10;
	//			weight, bias
	vector<pair<double, double>> chromosome{HIDDEN_LAYER_SIZE*(INPUT_SIZE+OUTPUT_SIZE), make_pair(0.0, 0.0)};
	double fitness;

	/*bool operator<(individual& a) {
		if(this->fitness < 0) this->calculate_fitness(training_samples);
		if(a.fitness < 0) a.calculate_fitness(training_samples);
		return this->fitness < a.fitness;
	}*/

	double activation_function_input(double val){
		return relu(val);
	}

	double activation_function_output(double val){
		return sigmoid(val);
	}

	double get_weight_input(int i, int j){
		return chromosome[j*(INPUT_SIZE+OUTPUT_SIZE)+i].first;
	}

	double get_bias_input(int i, int j){
		return chromosome[j*(INPUT_SIZE+OUTPUT_SIZE)+i].second;
	}

	double get_weight_output(int i){
		return chromosome[i*(INPUT_SIZE+OUTPUT_SIZE)+INPUT_SIZE].first;
	}

	double get_bias_output(int i){
		return chromosome[i*(INPUT_SIZE+OUTPUT_SIZE)+INPUT_SIZE].second;
	}

	int calculate_outcome(vector<double> in){
		vector<double> hidden(HIDDEN_LAYER_SIZE, 0.0);
		for(int i = 0; i < INPUT_SIZE; i++){
			for(int j = 0; j < HIDDEN_LAYER_SIZE; j++){
				hidden[j] += get_weight_input(i, j)*in[i]+get_bias_input(i, j);
			}
		}
		double output = 0;
		for(int i = 0; i < HIDDEN_LAYER_SIZE; i++) {
			output += activation_function_input(hidden[i])*get_weight_output(i) + get_bias_output(i);
		}
		return activation_function_output(output) >= 0.5;
	}

	void calculate_fitness(const vector<sample>& samples){
		int total = (int)samples.size();
		int correct = 0;
		for(sample s : samples){
			int outcome = calculate_outcome(s.input);
			correct += outcome+1 == s.output;
		}
		this->fitness = correct/(double)total;
	}

	void mutate(){
		for(int i = 0; i < (int)chromosome.size(); i++){
			if(rand_rangef(0, 1) <= MUTATION_PROBABILITY){
				chromosome[i] = {rand_rangef(MINIMAL_WEIGHT, MAXIMAL_WEIGHT), rand_rangef(MINIMAL_BIAS, MAXIMAL_BIAS)};
			}
		}
	}

	individual(){
		fitness = -1;
		for(auto& c : chromosome){
			c = {rand_rangef(MINIMAL_WEIGHT, MAXIMAL_WEIGHT), rand_rangef(MINIMAL_WEIGHT, MAXIMAL_WEIGHT)};
		}
	}

	individual(const vector<pair<double, double>>& c) : chromosome(c), fitness(-1) {}

	individual(const individual& i) : chromosome(i.chromosome), fitness(i.fitness) {}
};

bool fitness_descending_sort(individual& a, individual& b){
	return a.fitness > b.fitness;
}

struct genetic_algorithm{
	static const int ELITE_SIZE = 10;
	static const int POPULATION_SIZE = 100;
	static constexpr double MUTATION_PROBABILITY = 0.4;
	static vector<individual> population;

	static void create_population(){
		for(int i = 0; i < POPULATION_SIZE; i++){
			population.push_back(individual());
		}
	}

	static void evaluate_population(){
		for(auto& ind : population){
			//cout << "calculating fitness of " << x++ << endl;
			ind.calculate_fitness(training_samples);
		}
		////cout << "all fitnesses calculated." << endl;
		sort(population.begin(), population.end(), fitness_descending_sort);
		//cout << "everything sorted" << endl;
	}

	static void cross(){
		for(int i = ELITE_SIZE; i < POPULATION_SIZE; i+=2){
			int i1 = rand_range(0, ELITE_SIZE), i2 = rand_range(0, ELITE_SIZE);
			pair<individual, individual> crossed = crossover(population[i1], population[i2]);
			population[i] = crossed.first;
			population[i+1] = crossed.first;
		}
	}

	static void mutate(){
		for(auto& ind : population){
			if(rand_rangef(0, 1) < MUTATION_PROBABILITY){
				ind.mutate();
			}
		}
	}

	static pair<individual, individual> crossover(individual a, individual b){
		int i = rand_range(0, (int)a.chromosome.size());
		int j = rand_range(0, (int)a.chromosome.size());
		if(i > j) swap(i, j);
		pair<individual, individual> ret = {a, b};
		for(; i <= j; i++) {
			swap(ret.first.chromosome[i], ret.second.chromosome[i]);
		}
		return ret;
	}

	static void run(){
		int generation = 0;
		create_population();
		cout << "population created." << endl;
		evaluate_population();
		cout << "population evaluated." << endl;
		while(generation < 1000){
			print_elite(generation+1);
			run_validation(population[0]);
			cross();
			cout << "population crossed." << endl;
			mutate();
			cout << "population mutated." << endl;
			evaluate_population();
			cout << "population evaluated." << endl;
			generation++;
		}
		cout << "best individual: \n";
		cout << "individual({";
		for(int i = 0; i < (int)population[0].chromosome.size(); i++){
			cout << "{" << population[0].chromosome[i].first << ", " << population[0].chromosome[i].second << "}, ";
		}
		cout << "});\n";
	}

	static void run_validation(individual& ind){
		cout << "running validating samples for best individual:" << endl;
		ind.calculate_fitness(validating_samples);
		cout << "fitness of best individual: " << ind.fitness*100 << "%" << endl;
	}
	
	static void print_elite(int gen){
		cout << "Generation " << gen << endl;
		for(int i = 0; i < ELITE_SIZE; i++){
			cout << "\t" << i+1 << "ยบ: " << population[i].fitness*100 << "%" << endl;
		}
	}
};
vector<individual> genetic_algorithm::population;
void read_sample_file(std::string file_path, vector<sample>& samples){
	std::ifstream in(file_path);
	
	using std::cin;
	
	std::streambuf *cinbuf = cin.rdbuf();
	cin.rdbuf(in.rdbuf());

	int winner;
	int match_id;
	while(cin >> winner){
		cin >> match_id;
		vector<int> t1;
		vector<int> t2;
		int a = 0;
		for (int i = 0; i < 5; i++){
			cin >> a;
			t1.push_back(a);
		}
		for(int i = 0; i < 5; i++){
			cin >> a;
			t2.push_back(a);
		}
		samples.emplace_back(t1, t2, winner);
	}

	cin.rdbuf(cinbuf);
}

int main(){
	individual best_found = individual({{3.66981, -1.19085}, {11.324, 11.9376}, {16.4659, -12.0979}, {-6.59109, 10.7292}, {-12.8779, 0.661236}, {-0.904118, 5.15484}, {-5.40862, 0.536036}, {18.0892, 16.6478}, {5.42847, 8.69188}, {-14.3359, 4.27876}, {5.37563, 5.60632}, {-14.5107, 12.1671}, {3.19498, -1.87555}, {6.05574, -1.29856}, {19.957, -11.2697}, {10.3824, 8.88468}, {4.50559, -8.15874}, {5.50209, 0.971488}, {-0.256681, 18.911}, {4.90467, 8.01146}, {1.0698, 10.7966}, {0.973029, -8.70557}, {-14.2851, -7.40628}, {16.2908, 7.8233}, {-6.93945, 2.03112}, {1.03981, -16.5578}, {-12.3114, 6.52908}, {-17.8864, -2.30708}, {7.94178, -8.64363}, {-4.02738, -4.54142}, {-10.4688, 18.8254}, {16.0883, 14.0368}, {-9.33337, 1.59041}, {-4.99172, 10.4099}, {7.89479, 8.97651}, {-13.9509, 5.97473}, {-2.4945, 17.2734}, {-12.074, 7.09043}, {-8.62826, 9.54137}, {3.4391, 1.27768}, {7.51446, -13.361}, {-2.39582, 15.203}, {13.168, -6.78651}, {-10.8413, 15.7349}, {-7.12216, -1.38525}, {-17.2735, -3.18254}, {6.29216, 14.3471}, {-2.78225, 2.6827}, {-4.06253, 12.5907}, {-2.70502, -7.34732}, {-0.700374, -11.367}, {18.0101, 16.8051}, {-14.0936, 15.2425}, {5.64322, -2.72186}, {4.78386, -8.75762}, {11.4401, -7.70169}, {-10.5733, 2.58673}, {-12.4987, -8.95061}, {2.25775, -3.33995}, {-13.2157, 16.2722}, {13.9314, 9.61865}, {-0.182237, 10.419}, {-5.35575, 2.09896}, {2.29233, -18.1794}, {10.7967, 1.14444}, {2.18529, 6.92322}, {14.7819, 8.65884}, {-8.19754, -9.81823}, {-14.982, 10.821}, {-18.9188, -1.85755}, {10.8627, -4.9795}, {-12.2565, 2.01054}, {2.32134, -8.06457}, {-2.77319, 0.949554}, {18.1746, 18.0698}, {8.84351, 3.39036}, {-18.3318, -0.476657}, {4.7694, 9.97747}, {-3.61775, 1.49081}, {11.798, -12.2449}, {8.20616, -17.51}, {-13.4835, -6.85739}, {11.1488, 4.5173}, {13.1698, 16.1669}, {8.68022, -1.76718}, {-15.884, -5.24411}, {-19.3364, -7.3546}, {10.1369, -2.87744}, {-19.5632, -7.54141}, {17.0234, 1.96945}, {-7.93691, -7.73186}, {-3.3627, -6.26872}, {11.7915, -18.5933}, {-16.2913, -11.25}, {-11.5316, 15.5068}, {-3.4949, 16.6746}, {17.5805, 4.0615}, {17.0332, 9.49781}, {-6.26277, -7.16751}, {15.468, -2.99619}, {-18.0155, 0.146419}, {-16.1686, 3.33711}, {-18.7122, -19.4021}, {19.411, 5.08267}, {-5.40888, 16.4344}, {5.98828, -10.0782}, {5.17919, -10.8345}, {6.42359, -9.59522}, {-6.84892, -10.7429}, {-17.0336, 5.32289}, {-3.41948, 5.08299}, {0.427439, 18.8586}, {-8.79832, 1.84428}, {9.49033, -5.00692}, {-1.14066, 3.7016}, {17.7195, -2.53636}, {-6.54595, 13.9074}, {-2.61947, -19.8707}, {-6.20228, 3.93925}, {13.3297, -10.6443}, {7.01904, -0.681989}, {-0.722567, -7.80177}, {8.48349, -12.6978}, {4.87291, -18.3654}, {-3.44065, 7.83935}, {6.95746, 5.50561}, {-6.11537, -12.6151}, {4.36423, 5.08632}, {9.22917, -6.86502}, {16.6037, 9.49581}, {-12.1066, 4.36984}, {6.12521, -9.70938}, {1.29764, -16.4943}, {-9.58012, 15.0954}, {7.445, -16.2504}, {-15.549, -5.53596}, {9.23743, -7.81587}, {6.66226, -8.44889}, {3.43933, -0.539}, {12.1979, 1.50262}, {19.3745, -19.8569}, {-13.3739, 2.24892}, {4.67866, -9.96489}, {18.3455, 16.7572}, {10.5949, 7.96302}, {-15.1543, 7.43143}, {12.7331, 4.45055}, {17.7221, 16.6509}, {14.4767, -11.8581}, {-10.5982, -3.24946}, {-8.10846, 16.1973}, {16.3857, 14.9592}, {-0.0742429, 3.04798}, {-13.4897, -9.04355}, {14.5832, -0.304047}, {-1.45351, 13.9577}, {-10.2989, 6.03559}, {-12.7832, 7.36714}, {9.10201, -14.4377}, {4.12435, -0.303131}, {-7.58073, -0.167211}, {-12.8717, -11.1214}, {-0.0589807, -15.1496}, {-14.4705, -5.5823}, {8.18185, -7.57255}, {16.3394, 4.88382}, {-16.7771, 7.4507}, {-0.157023, -6.60113}, {-16.7665, 3.05122}, {4.35531, -9.64376}, {-13.9508, -17.0982}, {-15.6861, 5.8883}, {-5.45607, -8.46922}, {-15.5729, 1.14506}, {-2.90689, 17.3798}, {3.34281, -9.38155}, {18.4355, -4.77829}, {-0.502925, -13.7091}, {15.3215, 5.02661}, {17.6997, 8.37172}, {2.30242, -2.95202}, {-10.8373, -3.3483}, {-10.2269, -6.95946}, {9.1744, 5.54617}, {19.3938, -6.47028}, {2.55278, 4.31958}, {-3.56848, -19.7837}, {11.3313, 10.9754}, {-8.25288, -15.4133}, {14.6214, 8.84023}, {-9.37178, 0.606209}, {9.45612, -7.10846}, {9.1774, -9.11444}, {14.6072, -16.2432}, {8.81873, -4.53704}, {-9.83208, 4.57241}, {12.3638, -14.7319}, {-2.31926, -7.65218}, {13.8358, -6.32065}, {2.26815, 3.05604}, {-15.2355, 3.58547}, {-9.33473, 0.413724}, {6.46785, 1.66329}, {-9.48702, 5.86176}, {-9.46366, -1.60543}, {-2.15309, 9.65918}, {-19.6003, 3.97876}, {-10.6538, 13.1923}, {-17.363, 5.21782}, {-6.73479, -4.17597}, {0.701163, 4.49106}, {13.0708, -8.36685}, {-5.71228, 15.1311}, {-6.22996, 12.5963}, {-8.20968, 4.67144}, {-12.4994, 8.86466}, {5.03856, 13.4441}, {14.4156, 0.0370397}, {-12.0792, 4.49768}, {0.65909, -0.348601}, {11.2905, 8.77847}, {-15.4976, -7.2776}, {-7.37368, -2.63966}, {-9.45525, -3.57321}, {1.31384, -13.811}, {2.21591, -19.4168}, {-4.79141, -4.71331}, {-14.0735, -0.776081}, {-15.893, 2.2968}, {2.09266, 16.7836}, {7.43945, 12.3914}, {7.91393, -7.52198}, {5.83556, -19.7598}, {1.31839, 13.7564}, {-12.745, 5.71935}, {-18.4026, 6.81534}, {-5.51383, 8.75469}, {-14.579, -4.37098}, {4.90401, 9.45232}, {-17.4576, 7.42887}, {-4.66696, -6.08519}, {15.1546, -7.84782}, {-9.37161, -4.81147}, {-7.59728, 5.51808}, {6.21472, 14.3022}, {-13.0171, -8.70883}, {6.69362, 15.1604}, {14.4662, 2.21042}, {15.4006, -12.5494}, {13.1351, -4.24401}, {16.3665, -6.82626}, {11.5925, -3.27544}, {-9.72231, 6.352}, {-6.71188, 7.80601}, {-15.6609, -6.7849}, {-10.6752, 17.063}, {2.05772, 17.3368}, {-6.61861, 5.92295}, {-11.2886, 8.86972}, {12.5655, 3.77989}, {6.28804, 19.812}, {17.4341, -7.01834}, {10.5472, 4.9876}, {-3.52804, 0.230997}, {17.8048, 5.2866}, {13.3533, 3.37271}, {-1.17743, -13.3218}, {11.8196, 14.6034}, {14.9209, 6.57658}, {-3.5007, 4.47923}, {-17.203, 3.5805}, {1.54226, -14.0663}, {3.16086, -18.6815}, {-19.1319, -7.94692}, {13.3044, 0.601963}, {-15.4941, -0.4076}, {-8.41673, -4.57487}, {12.5741, -4.61366}, {5.50625, -1.9151}, {-18.8482, -8.18178}, {19.0545, -1.91076}, {-19.3017, 8.70387}, {-9.32475, -4.48808}, {3.30729, -2.1303}, {4.95039, -4.47385}, {-17.6511, -17.0296}, {3.85508, 1.60879}, {-11.0959, -11.2085}, {14.8171, 6.9049}, {9.51754, -1.48591}, {-2.45753, 14.0235}, {-11.0044, 1.46398}, {15.9634, 10.6805}, {6.75979, -9.91425}, {15.1988, 5.39726}, {17.9928, -1.35326}, {15.3727, 18.6911}, {-12.6494, -1.67844}, {11.209, 10.6579}, {-3.79017, -0.00534709}, {10.4645, 18.5402}, {11.4023, 0.613666}, {8.07946, -8.25734}, {0.25803, -0.879062}, {4.03716, -6.28051}, {-6.53196, -1.56414}, {-11.5723, 4.26169}, {14.6173, -15.6089}, {-5.05777, -12.0399}, {5.86081, 3.70768}, {-17.5452, -2.74775}, {-17.6456, 2.43487}, {4.74406, 5.77476}, {-16.1931, -2.86189}, {10.221, -3.4758}, {4.05707, 10.8274}, {-11.4181, -7.9462}, {14.8871, -2.30551}, {-0.491172, 11.8093}, {-4.5631, 9.11397}, {-13.7865, -8.28444}, {7.1225, 5.1801}, {15.9773, 9.90551}, {-0.967775, -9.08052}, {1.11126, -1.38898}, {19.8917, 7.82875}, {7.89677, 5.4985}, {1.39553, -3.94456}, {8.6623, -7.19419}, {10.5121, -3.10814}, {-14.9332, -10.8979}, {17.877, -19.4453}, {18.691, -4.69315}, {-1.52609, 5.9418}, {16.6088, -15.9657}, {-8.60152, -4.20142}, {-8.40943, -1.62957}, {-6.89831, 6.08888}, {-11.2618, 7.16511}, {2.64658, -12.3716}, {14.9753, 5.4844}, {12.5561, 10.1353}, {19.5353, 9.43701}, {-4.49585, -2.96856}, {-11.9621, 6.47166}, {7.99149, -6.89536}, {15.5737, 5.86847}, {-6.25525, 8.00203}, {9.69248, 9.18284}, {-2.41075, 4.68134}, {16.1675, -7.48241}, {10.0991, -8.08267}, {12.3748, -12.4375}, {-14.4739, -2.80747}, {-12.0806, 4.11372}, {-10.2341, -14.5532}, {-5.26807, -3.98404}, {-0.868645, 1.7152}, {-18.1934, -3.91246}, {16.2854, 7.53086}, {3.48045, -13.2465}, {2.5458, -3.59962}, {12.622, 17.0427}, {1.0609, 3.29001}, {9.17591, -10.9906}, {-9.43312, 5.34339}, {1.52701, -19.334}, {17.2607, -6.09816}, {-13.0453, 1.71629}, {-3.96059, -7.71327}, {11.8218, 9.42037}, {-2.26645, -9.23911}, {8.12745, -6.68432}, {-7.05742, 4.71812}, {8.02878, 5.51371}, {-19.3529, 13.8049}, {14.0964, 4.03051}, {-7.1409, 6.71841}, {0.666605, 9.2457}, {18.224, 0.731967}, {-17.0706, 0.575287}, {15.5925, 4.45644}, {1.24131, 12.8532}, {-7.86305, -4.01207}, {-0.64898, -1.63636}, {-18.2434, -19.0455}, {-19.797, -0.509833}, {-8.28458, 8.3305}, {12.8058, 0.296382}, {2.81335, -6.82941}, {-12.3607, -0.654066}, {16.9352, -18.2642}, {-16.6236, -10.2057}, {-16.6396, 3.35557}, {-16.2857, 18.4626}, {14.6988, -13.3562}, {-0.962106, 10.2913}, {4.75049, 0.034075}, {-4.53825, 7.25054}, {9.74908, 16.9029}, {17.2866, -1.58934}, {-16.0043, -7.37101}, {-9.00414, -10.4272}, {12.3897, -16.1983}, {16.8331, 9.07658}, {-15.3872, -4.57497}, {13.5645, 9.02749}, {7.12501, 8.22244}, {-1.56752, 5.02168}, {-10.8077, -2.67048}, {6.16115, -7.04067}, {4.01969, -14.801}, {6.41689, -5.44731}, {-14.5218, 6.3951}, {-15.4216, 15.2273}, {3.29799, -11.5655}, {-14.8519, -1.99149}, {-7.50626, 17.7289}, {-10.1833, -8.13038}, {-2.11347, 9.75316}, {-4.028, -11.5374}, {-1.89401, -13.5935}, {15.0934, 5.22919}, {-19.6486, 4.23849}, {-15.3049, 2.65504}, {2.50963, 5.27301}, {-11.3983, -8.45732}, {3.79977, -5.75095}, {-17.493, -18.1127}, {1.083, -12.9147}, {17.1146, -15.619}, {-4.48015, 3.84765}, {5.53638, 8.01358}, {1.57654, -3.7354}, {12.897, 3.10713}, {16.862, -11.131}, {11.5697, -5.03197}, {-4.72449, -16.1004}, {16.1164, 7.34253}, {18.422, -7.05437}, {13.9709, 13.2585}, {8.57727, 5.40816}, {0.645543, 4.98633}, {-5.61221, -7.93493}, {1.78438, -3.04928}, {13.3387, -9.34188}, {-14.44, -14.2423}, {-12.1641, 11.0964}, {13.7712, 9.41245}, {-12.639, 6.66828}, {-7.48042, -15.7769}, {15.5373, -15.9107}, {-0.808914, -9.18718}, {-12.011, -8.49054}, {8.0849, 3.46663}, {7.22005, -6.32223}, {11.1385, 17.454}, {-14.3153, -8.21595}, {2.44029, 5.78079}, {14.9366, -10.6861}, {6.95984, 5.17437}, {6.10238, -3.54799}, {10.932, -18.8619}, {3.61628, 4.70329}, {10.5506, 10.9773}, {-17.7861, 3.34582}, {15.2003, -13.0911}, {-0.701252, 7.04665}, {11.6905, -3.4488}, {5.90089, -15.9726}, {2.25281, -3.75307}, {13.6048, -5.29627}, {12.2316, 9.98876}, {19.345, -8.4104}, {-4.23045, -9.11243}, {-10.7051, -5.07824}, {16.5149, -1.40047}, {15.2493, 6.99398}, {-1.57393, -1.13445}, {1.56623, -2.70762}, {-10.1572, 3.06884}, {-12.6689, 9.64794}, {9.97773, -0.79378}, {-0.56537, -12.3006}, {14.3546, -14.6645}, {-8.27314, -12.6169}, {-19.8869, 16.0309}, {-8.44994, 12.3447}, {6.01963, 7.50108}, {-12.9835, -18.2108}, {-12.8008, 7.70405}, {-15.4814, 14.4506}, {-1.89544, -1.88219}, {1.44458, 6.71633}, {-1.36661, 13.1419}, {19.0536, -7.30627}, {-3.78931, -12.2603}, {13.5194, -13.8116}, {6.94593, -7.04593}, {-6.11215, 1.30057}, {-1.71041, 5.61471}, {8.68366, -1.5973}, {13.759, -6.83738}, {-9.25263, -12.3348}, {7.73481, -2.23611}, {-10.5456, 6.12347}, {-11.2338, -6.02704}, {0.739143, -0.718286}, {-6.2592, -17.9813}, {-16.2272, 12.3742}, {15.1605, 19.4657}, {-2.30186, 1.90417}, {-12.7945, -5.63013}, {-2.44038, 14.1514}, {7.32393, 11.4475}, {-4.54805, -14.3865}, {-2.93782, -15.8644}, {4.01622, 18.7078}, {-15.6307, 14.7636}, {-13.627, 12.1041}, {-4.38311, 5.67661}, {-1.77238, 1.29368}, {-12.3038, -0.450557}, {18.3501, -16.4589}, {-19.1797, -17.8771}, {15.9153, 15.9808}, {2.39795, -8.60221}, {-2.40001, -5.89889}, {11.1356, 4.91165}, {-17.0545, -1.54044}, {-3.64088, -1.60254}, {-0.43852, -3.17598}, {5.9563, 6.24714}, {12.1291, 6.90241}, {-12.3507, -0.356694}, {-5.01589, 1.3716}, {-5.67059, 17.2342}, {16.674, -15.8703}, {15.4145, -5.77978}, {5.13898, 0.721969}, {-13.335, -3.65384}, {-12.4277, -8.4766}, {0.351955, -19.8109}, {-12.4701, -8.51242}, {5.10071, -9.52456}, {9.94713, -18.5402}, {8.8729, -5.97979}, {5.18172, 7.27004}, {2.1095, 7.01021}, {-17.5653, 6.17079}, {5.51225, -2.68507}, {-19.6573, 19.8417}, {-5.4509, 17.0168}, {-16.0286, -9.41505}, {12.041, -8.35772}, {-12.5589, 9.18806}, {7.25305, 9.58316}, {7.92385, 15.5804}, {-11.5455, 4.73114}, {-12.932, 5.56794}, {-14.0708, 17.0151}, {-18.2454, 3.2963}, {-8.96464, 1.90891}, {-13.7919, 13.1449}, {-11.0809, -15.4836}, {-1.89275, 14.4314}, {1.83138, -1.55001}, {-7.90421, 4.86675}, {-4.53323, 18.2444}, {-17.4723, -6.13856}, {-10.1133, -5.59343}, {16.6958, 5.11519}, {-5.31526, 4.61964}, {17.5369, -1.93751}, {19.9716, -5.76673}, {-14.2421, -3.65354}, {4.77879, 7.74768}, {0.804731, 15.8141}, {-10.3434, 7.01281}, {-19.2975, 8.68876}, {11.5293, -12.9337}, {-6.99292, -6.63937}, {14.2338, 6.07635}, {-10.2589, -19.017}, {12.3448, -1.85091}, {5.43712, -7.30831}, {11.1131, -14.8135}, {-19.4735, -14.2022}, {9.80618, 1.22209}, {0.949814, -10.1204}, {-11.0143, 1.66972}, {15.8822, 13.7645}, {-10.5826, -3.31306}, {9.57867, -0.926}, {-16.3003, -1.46232}, {2.41615, -0.750036}, {5.60394, -9.3432}, {12.5467, -0.954339}, {-17.0692, -0.83657}, {13.6208, -4.00048}, {3.35315, 7.06699}, {18.8727, 6.15039}, {-3.04058, -6.79916}, {-16.4832, 3.38111}, {0.475166, -6.6347}, {5.46625, 9.607}, {16.4253, -7.79231}, {-0.66261, 6.20785}, {18.0354, -7.04981}, {7.94312, 2.8377}, {11.4879, 0.708889}, {16.9642, -2.90819}, {12.2316, -0.675419}, {8.212, -10.6974}, {19.4008, 6.75921}, {-10.8054, -2.39452}, {-0.984814, 9.65783}, {-15.861, 6.54573}, {11.036, 17.0204}, {6.9291, -1.69029}, {-10.0815, -12.2574}, {9.63506, 6.99099}, {2.18172, -3.96335}, {-11.5286, 7.12644}, {-15.7146, -7.43744}, {-19.0777, -8.44054}, {-4.34115, 9.09639}, {-8.51059, -3.0508}, {11.3796, 14.3777}, {-10.6845, -6.98477}, {14.6929, -14.3281}, {-2.54325, -5.02488}, {10.4503, 1.1612}, {9.19506, 4.3158}, {16.2786, -15.432}, {19.111, -0.133544}, {12.6294, -1.30854}, {-9.0637, -2.63327}, {10.8792, 9.619}, {15.305, 4.70521}, {-2.86371, -7.51119}, {-19.0985, -8.05102}, {-16.7846, -1.27262}, {6.53006, 14.5949}, {-13.8712, 4.86128}, {12.1129, -0.0958229}, {-14.8903, -15.9551}, {12.3442, 9.33599}, {-10.199, -5.68889}, {10.763, 19.5817}, {-9.74046, 10.7649}, {-5.95456, -1.36725}, {17.9929, 4.41719}, {-14.3385, -2.33286}, {15.6168, -7.50038}, {-18.5792, -13.6978}, {9.88922, -6.0175}, {9.22706, 13.1046}, {12.7099, -4.24288}, {7.69951, -14.1851}, {-4.80502, 17.5585}, {-0.347298, 4.32895}, {6.26633, -1.31972}, {13.624, 0.972936}, {10.9609, -0.729357}, {11.0413, -8.28786}, {-15.7491, -9.73307}, {15.5339, 16.2819}, {-19.5806, -1.75241}, {-2.97883, -5.22986}, {-10.6346, -5.89387}, {-9.4817, 0.80053}, {9.61802, -2.12496}, {-0.0148446, -2.39455}, {-11.1805, -9.55142}, {12.269, -2.20001}, {-19.743, -18.2443}, {9.13183, -18.1395}, {18.7684, -8.14513}, {12.7156, 1.62724}, {-10.3799, -2.09366}, {12.8835, -1.89455}, {1.52221, -10.0295}, {5.87362, -11.7488}, {9.47603, -19.9116}, {19.8685, 6.60594}, {-4.27611, -0.755035}, {-16.6244, -14.6581}, {17.12, -1.62541}, {14.228, -6.75711}, {-15.2537, 4.04342}, {8.85554, -3.76011}, {6.44934, -8.54618}, {2.02005, -2.05248}, {-19.434, 9.95768}, {-17.9192, 2.63056}, {-4.97159, 5.88501}, {-14.572, -5.65862}, {14.2653, 0.683518}, {10.9864, 11.6925}, {-18.5394, 1.58336}, {-6.47054, 1.20177}, {0.781793, 3.73412}, {2.52644, 17.9483}, {12.3947, 7.7942}, {17.8162, 2.17892}, {6.0089, 8.27981}, {17.327, -16.4228}, {-14.1259, 2.82373}, {-0.0861286, -2.44304}, {-9.52466, 17.7233}, {10.9232, -4.01975}, {9.9692, -1.0375}, {14.4235, 12.1856}, {0.334775, 5.40984}, {8.67447, 5.1775}, {-13.0068, 17.0518}, {18.9799, -12.1785}, {-6.39897, 1.50639}, {-2.13801, 5.16128}, {10.3105, -1.96315}, {1.26479, 5.18763}, {2.75016, 1.84888}, {9.71223, -3.72412}, {-18.1063, -6.14233}, {-17.6551, -9.8375}, {-6.09389, 5.70025}, {4.53016, 8.89506}, {0.855774, 5.36232}, {-14.7864, 3.22587}, {-15.6365, -15.0412}, {18.9934, -2.90273}, {18.3987, 0.34403}, {-0.821797, -4.38844}, {2.34095, 4.94805}, {4.13644, -5.9564}, {-0.581598, -11.3417}, {11.7551, -17.8314}, {-3.14831, -0.430706}, {-18.0903, 12.8737}, {15.4253, -2.06165}, {2.20478, -4.62552}, {-6.86877, -0.424664}, {-17.9326, 19.6941}, {-10.8006, 3.1481}, {7.5759, 7.1737}, {8.10688, 1.60786}, {4.91951, 10.1174}, {2.44242, -15.9023}, {-4.97282, -0.524436}, {9.04577, 9.86541}, {-1.17304, -11.5358}, {-9.48398, -0.321474}, {4.42213, -4.62122}, {3.62598, -7.4576}, {1.90452, 17.8725}, {11.7501, 7.62007}, {-8.9552, 11.7198}, {-2.13421, -6.8878}, {11.4138, 7.06514}, {16.2603, -8.8329}, {4.50538, -8.70686}, {12.775, 5.54748}, {-5.51541, -4.78262}, {9.6452, 0.213552}, {0.000743931, -1.30903}, {-15.0441, 8.05868}, {7.15514, -11.3974}, {-10.5902, 17.7879}, {3.14278, -6.83491}, {14.8556, 0.829826}, {10.9082, -17.9196}, {-5.0486, -2.23858}, {13.8002, 5.02385}, {-4.93477, 5.21405}, {8.87827, -2.69326}, {16.3811, -7.28304}, {7.16733, 4.58328}, {18.4865, 6.48106}, {-15.6265, 7.90964}, });
	// srand((int)time(0));
	populate_winrate_lookup_table();
	read_sample_file("data/samples/training_samples.txt", training_samples);
	read_sample_file("data/samples/validating_samples.txt", validating_samples);
	genetic_algorithm::run();
}
